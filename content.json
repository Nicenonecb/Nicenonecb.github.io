{"meta":{"title":"孤独快乐的时光","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2021-07-12T16:40:00.277Z","updated":"2021-07-12T16:40:00.277Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2021-07-12T16:40:00.276Z","updated":"2021-07-12T16:40:00.276Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-07-12T16:40:00.280Z","updated":"2021-07-12T16:40:00.280Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2021-7-13 算法","slug":"daycode/7.13","date":"2021-07-13T16:30:21.844Z","updated":"2021-07-13T16:33:12.874Z","comments":true,"path":"2021/07/14/daycode/7.13/","link":"","permalink":"http://example.com/2021/07/14/daycode/7.13/","excerpt":"","text":"最长回文字符串 回文就是正着读反着读都可以的 123456789101112131415161718192021//中心扩散法let s= &#x27;babad&#x27;function longStr(s)&#123; let res = &#x27;&#x27; for(let i = 0;i&lt;s.length;i++)&#123; helper(i,i) helper(i,i+1) &#125; function helper(m,n)&#123; while(m&gt;=0&amp;&amp;n&lt;s.length&amp;&amp;s[m]===s[n])&#123; m--; n++ if(n-m-1&gt;res.length)&#123; res = s.slice(m-1,n) &#125; &#125; &#125; return res&#125;console.log(longStr(s))","categories":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/categories/day-code/"}],"tags":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/tags/day-code/"}]},{"title":"2021-7-13学习","slug":"daylearn/2021.7.13","date":"2021-07-13T10:24:34.471Z","updated":"2021-07-13T11:05:45.400Z","comments":true,"path":"2021/07/13/daylearn/2021.7.13/","link":"","permalink":"http://example.com/2021/07/13/daylearn/2021.7.13/","excerpt":"","text":"1.ts中泛型是什么（回顾）复用定义的数据接口 123456789//不用泛型写function identity(arg: number): number &#123; return arg;&#125;//采用泛型，对返回值类型进行约束function identity&lt;T&gt;(arg: T): T &#123; return arg;&#125; 2.控制反转面向对象的设计原则，降低代码耦合度,常见实现方法是依赖注入和依赖查找 细节：Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。 3.react 更新机制 1.render阶段:render阶段开始于performSyncWorkOnRoot或performConcurrentWorkOnRoot方法的调用。这取决于本次更新是同步更新还是异步更新。 2.commit阶段: commitRoot方法的调用。其中rootFiber会作为传参。 3.创建Update对象:ReactDOM.render this.setState this.forceUpdate useState useReduce都可以触发状态更新 4.从fiber到root 5.调度更新","categories":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/categories/day-learn/"}],"tags":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/tags/day-learn/"}]},{"title":"2021杭州前端市场面试技术考研调研","slug":"面经/面经技术栈","date":"2021-07-13T09:27:10.761Z","updated":"2021-07-13T09:40:14.654Z","comments":true,"path":"2021/07/13/面经/面经技术栈/","link":"","permalink":"http://example.com/2021/07/13/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F%E6%8A%80%E6%9C%AF%E6%A0%88/","excerpt":"","text":"","categories":[{"name":"Interviews","slug":"Interviews","permalink":"http://example.com/categories/Interviews/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"第一天的vue","slug":"第一天的vue","date":"2021-07-12T16:55:36.818Z","updated":"2021-07-12T17:08:53.726Z","comments":true,"path":"2021/07/13/第一天的vue/","link":"","permalink":"http://example.com/2021/07/13/%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%9A%84vue/","excerpt":"","text":"123chonga1","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-12T16:30:15.067Z","updated":"2021-07-12T17:02:56.677Z","comments":true,"path":"2021/07/13/hello-world/","link":"","permalink":"http://example.com/2021/07/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/categories/day-code/"},{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/categories/day-learn/"},{"name":"Interviews","slug":"Interviews","permalink":"http://example.com/categories/Interviews/"},{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/tags/day-code/"},{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/tags/day-learn/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]}