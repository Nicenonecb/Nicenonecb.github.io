{"meta":{"title":"孤独快乐的时光","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2021-07-12T16:40:00.277Z","updated":"2021-07-12T16:40:00.277Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2021-07-12T16:40:00.276Z","updated":"2021-07-12T16:40:00.276Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-07-12T16:40:00.280Z","updated":"2021-07-12T16:40:00.280Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2021-7-14 算法","slug":"daycode/7.14","date":"2021-07-14T10:49:12.186Z","updated":"2021-07-14T12:10:32.531Z","comments":true,"path":"2021/07/14/daycode/7.14/","link":"","permalink":"http://example.com/2021/07/14/daycode/7.14/","excerpt":"","text":"给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 示例 1： 输入：nums1 = [1,3], nums2 = [2]输出：2.00000解释：合并数组 = [1,2,3] ，中位数 2 1234567891011121314151617181920212223242526var findMedianSortedArrays = function(nums1, nums2) &#123; // 归并排序 const merged = [] let i = 0 let j = 0 while(i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123; if (nums1[i] &lt; nums2[j]) &#123; merged.push(nums1[i++]) &#125; else &#123; merged.push(nums2[j++]) &#125; &#125; while(i &lt; nums1.length) &#123; merged.push(nums1[i++]) &#125; while(j &lt; nums2.length) &#123; merged.push(nums2[j++]) &#125; const &#123; length &#125; = merged return length % 2 === 1 ? merged[Math.floor(length / 2)] : (merged[length / 2] + merged[length / 2 - 1]) / 2&#125;;","categories":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/categories/day-code/"}],"tags":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/tags/day-code/"}]},{"title":"2021-7-14学习","slug":"daylearn/2021.7.14","date":"2021-07-13T17:26:00.691Z","updated":"2021-07-14T12:28:13.191Z","comments":true,"path":"2021/07/14/daylearn/2021.7.14/","link":"","permalink":"http://example.com/2021/07/14/daylearn/2021.7.14/","excerpt":"","text":"1.JavaScript中对象序列化？为什么需要序列化？序列化的好处:对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。 对象序列化: 把对象的状态转换为字符串的过程，之后可以恢复对象的状态。 12//JavaScript提供了JSON.stringfy()和JSON.parse() 用于序列化和恢复JavaScript对象状态 2.Web Component是啥？有啥作用？允许在Web文档和Web应用程序中创建可重用的小部件或组件。这样做的目的是将基于组件的软件工程引入万维网。组件模型将允许单个HTML元素的封装和互操作性。Custom elements（自定义元素）Shadow DOM（影子DOM）HTML templates（HTML模板） 3.Reflect是啥？有啥作用？1.Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers的方法相同。Reflect不是一个函数对象，因此它是不可构造的。2.作用看api 4.现代计算机结构以存储器为核心 有输入输出设备，运算器，控制器","categories":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/categories/day-learn/"}],"tags":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/tags/day-learn/"}]},{"title":"2021-7-13 算法","slug":"daycode/7.13","date":"2021-07-13T16:30:21.844Z","updated":"2021-07-13T16:33:12.874Z","comments":true,"path":"2021/07/14/daycode/7.13/","link":"","permalink":"http://example.com/2021/07/14/daycode/7.13/","excerpt":"","text":"最长回文字符串 回文就是正着读反着读都可以的 123456789101112131415161718192021//中心扩散法let s= &#x27;babad&#x27;function longStr(s)&#123; let res = &#x27;&#x27; for(let i = 0;i&lt;s.length;i++)&#123; helper(i,i) helper(i,i+1) &#125; function helper(m,n)&#123; while(m&gt;=0&amp;&amp;n&lt;s.length&amp;&amp;s[m]===s[n])&#123; m--; n++ if(n-m-1&gt;res.length)&#123; res = s.slice(m-1,n) &#125; &#125; &#125; return res&#125;console.log(longStr(s))","categories":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/categories/day-code/"}],"tags":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/tags/day-code/"}]},{"title":"2021-7-13学习","slug":"daylearn/2021.7.13","date":"2021-07-13T10:24:34.471Z","updated":"2021-07-13T11:05:45.400Z","comments":true,"path":"2021/07/13/daylearn/2021.7.13/","link":"","permalink":"http://example.com/2021/07/13/daylearn/2021.7.13/","excerpt":"","text":"1.ts中泛型是什么（回顾）复用定义的数据接口 123456789//不用泛型写function identity(arg: number): number &#123; return arg;&#125;//采用泛型，对返回值类型进行约束function identity&lt;T&gt;(arg: T): T &#123; return arg;&#125; 2.控制反转面向对象的设计原则，降低代码耦合度,常见实现方法是依赖注入和依赖查找 细节：Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。 3.react 更新机制 1.render阶段:render阶段开始于performSyncWorkOnRoot或performConcurrentWorkOnRoot方法的调用。这取决于本次更新是同步更新还是异步更新。 2.commit阶段: commitRoot方法的调用。其中rootFiber会作为传参。 3.创建Update对象:ReactDOM.render this.setState this.forceUpdate useState useReduce都可以触发状态更新 4.从fiber到root 5.调度更新","categories":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/categories/day-learn/"}],"tags":[{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/tags/day-learn/"}]},{"title":"2021杭州前端市场面试技术考研调研","slug":"面经/面经技术栈","date":"2021-07-13T09:27:10.761Z","updated":"2021-07-13T09:40:14.654Z","comments":true,"path":"2021/07/13/面经/面经技术栈/","link":"","permalink":"http://example.com/2021/07/13/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F%E6%8A%80%E6%9C%AF%E6%A0%88/","excerpt":"","text":"","categories":[{"name":"Interviews","slug":"Interviews","permalink":"http://example.com/categories/Interviews/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"第一天的vue","slug":"第一天的vue","date":"2021-07-12T16:55:36.818Z","updated":"2021-07-12T17:08:53.726Z","comments":true,"path":"2021/07/13/第一天的vue/","link":"","permalink":"http://example.com/2021/07/13/%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%9A%84vue/","excerpt":"","text":"123chonga1","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-12T16:30:15.067Z","updated":"2021-07-12T17:02:56.677Z","comments":true,"path":"2021/07/13/hello-world/","link":"","permalink":"http://example.com/2021/07/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/categories/day-code/"},{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/categories/day-learn/"},{"name":"Interviews","slug":"Interviews","permalink":"http://example.com/categories/Interviews/"},{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[{"name":"day[code]","slug":"day-code","permalink":"http://example.com/tags/day-code/"},{"name":"day[learn]","slug":"day-learn","permalink":"http://example.com/tags/day-learn/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]}