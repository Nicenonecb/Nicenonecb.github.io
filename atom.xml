<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独快乐的时光</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-28T14:18:43.118Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021-10-21学习</title>
    <link href="http://example.com/2021/10/21/daylearn/2021.10.21/"/>
    <id>http://example.com/2021/10/21/daylearn/2021.10.21/</id>
    <published>2021-10-21T12:12:36.297Z</published>
    <updated>2021-10-28T14:18:43.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。<br>通俗解释：动态数据可以镶嵌在静态页面上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-模板引擎&quot;&gt;&lt;a href=&quot;#1-模板引擎&quot; class=&quot;headerlink&quot; title=&quot;1.模板引擎&quot;&gt;&lt;/a&gt;1.模板引擎&lt;/h3&gt;&lt;p&gt;用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTM</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-10-20学习</title>
    <link href="http://example.com/2021/10/20/daylearn/2021.10.20/"/>
    <id>http://example.com/2021/10/20/daylearn/2021.10.20/</id>
    <published>2021-10-20T06:04:17.664Z</published>
    <updated>2021-10-21T12:12:09.646Z</updated>
    
    <content type="html"><![CDATA[<p>1.dom事件捕获与冒泡<br>分别由微软和网景提出</p><p>都是形同事件发生顺序，一个是由当前节点到根结点（冒泡），捕获相反</p><p>element.addEventListener(event, function, useCapture)</p><p>event： 绑定的事件</p><p>function： 执行的回调</p><p>useCapture： false 执行冒泡 capture（捕获）</p><p>延展：事件代理</p><p><a href="https://segmentfault.com/a/1190000005654451">事件捕获与冒泡</a></p><p>2.postcss是预编译吗？</p><p>不是，postcss是css领域的webpack</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.dom事件捕获与冒泡&lt;br&gt;分别由微软和网景提出&lt;/p&gt;
&lt;p&gt;都是形同事件发生顺序，一个是由当前节点到根结点（冒泡），捕获相反&lt;/p&gt;
&lt;p&gt;element.addEventListener(event, function, useCapture)&lt;/p&gt;
&lt;p&gt;ev</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-10-18学习</title>
    <link href="http://example.com/2021/10/18/daylearn/2021.10.18/"/>
    <id>http://example.com/2021/10/18/daylearn/2021.10.18/</id>
    <published>2021-10-18T02:16:07.403Z</published>
    <updated>2021-10-20T11:41:29.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-babel转译魔法及node包加载过程"><a href="#1-babel转译魔法及node包加载过程" class="headerlink" title="1 babel转译魔法及node包加载过程"></a>1 babel转译魔法及node包加载过程</h3><p> <img src="https://i.loli.net/2021/10/20/2GI4q5wTutvQWbA.png" alt="加载过程.jpg"></p><p> node在加载包的时候会调用load方法，通过module._extensions<br>  核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Module = <span class="built_in">require</span>(<span class="string">&#x27;module&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Module._extensions[<span class="string">&#x27;.js&#x27;</span>] = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(filename, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (filename.includes(<span class="string">&#x27;input&#x27;</span>)) &#123;</span><br><span class="line">        content = content.replace(<span class="string">&#x27;已经输出的&#x27;</span>, <span class="string">&#x27;你想替代的&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">module</span>._compile(content, filename);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Sanitizer-api总结介绍-及其他"><a href="#Sanitizer-api总结介绍-及其他" class="headerlink" title="Sanitizer api总结介绍 及其他"></a>Sanitizer api总结介绍 及其他</h3><p>危险dom行为：</p><p>1.各种工具的文本粘贴功能</p><p>2.需要渲染服务端返回HTML的场景</p><p>防止xss攻击两种选择<br>1.escape（转译）<br>2.Sanitizer（消毒）</p><p>Sanitizer 对危险dom  进行消毒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">allowElements</span>: [],</span><br><span class="line">  <span class="attr">blockElements</span>: [],</span><br><span class="line">  <span class="attr">dropElements</span>: [],</span><br><span class="line">  <span class="attr">allowAttributes</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">dropAttributes</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">allowCustomElements</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowComments</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Sanitizer(config)</span><br></pre></td></tr></table></figure><p>allowElements 白名单dom<br>blockElements 黑名单dom</p><h3 id="github-action简介"><a href="#github-action简介" class="headerlink" title="github action简介"></a>github action简介</h3><p>在github仓库通过github action实现自动化、自定义和执行软件开发工作流程。</p><p><a href="https://docs.github.com/cn/actions/creating-actions/about-custom-actions">github 参考文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-babel转译魔法及node包加载过程&quot;&gt;&lt;a href=&quot;#1-babel转译魔法及node包加载过程&quot; class=&quot;headerlink&quot; title=&quot;1 babel转译魔法及node包加载过程&quot;&gt;&lt;/a&gt;1 babel转译魔法及node包加载过程&lt;/</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>忍者秘籍</title>
    <link href="http://example.com/2021/09/12/JavaScript%E6%97%85%E9%80%94/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/js%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/09/12/JavaScript%E6%97%85%E9%80%94/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/js%E5%87%BD%E6%95%B0/</id>
    <published>2021-09-12T14:06:15.169Z</published>
    <updated>2021-09-12T14:13:22.116Z</updated>
    
    <content type="html"><![CDATA[<p>函数<br><img src="https://i.loli.net/2021/09/12/wyMLOSsqUcrnelZ.png" alt="Js函数.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/09/12/wyMLOSsqUcrnelZ.png&quot; alt=&quot;Js函数.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="忍者秘籍" scheme="http://example.com/categories/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2021-8-2学习</title>
    <link href="http://example.com/2021/08/02/daylearn/2021.8.2/"/>
    <id>http://example.com/2021/08/02/daylearn/2021.8.2/</id>
    <published>2021-08-02T14:20:10.000Z</published>
    <updated>2021-08-02T14:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-如何实现-externals"><a href="#1-如何实现-externals" class="headerlink" title="1.如何实现 externals"></a>1.如何实现 externals</h3><p>本来作用是：防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。<br>ExternalsPlugin 追溯到这里</p><h3 id="2-runtime"><a href="#2-runtime" class="headerlink" title="2. runtime"></a>2. runtime</h3><p>runtime 描述了程序运行时候执行的软件/指令， 在每种语言有着不同的实现。可大可小，在 C 中，runtime 是库代码， 等同于 C runtime library，一系列 C 程序运行所需的函数，在 Java 中，runtime 还提供了 Java 程序运行所需的虚拟机等。</p><p>总而言之，runtime 是一个通用抽象的术语，指的是计算机程序运行的时候所需要的一切代码库，框架，平台等。</p><h3 id="3-yc老哥的启示"><a href="#3-yc老哥的启示" class="headerlink" title="3. yc老哥的启示"></a>3. yc老哥的启示</h3><h4 id="愚蠢的问题：一门语言没有runtime和gc，它的优势除了快还有啥，编译语言实现gc和runtime的话，是在编译器实现上还是语言上？如果两个都可以的话，哪个会更好一点"><a href="#愚蠢的问题：一门语言没有runtime和gc，它的优势除了快还有啥，编译语言实现gc和runtime的话，是在编译器实现上还是语言上？如果两个都可以的话，哪个会更好一点" class="headerlink" title="愚蠢的问题：一门语言没有runtime和gc，它的优势除了快还有啥，编译语言实现gc和runtime的话，是在编译器实现上还是语言上？如果两个都可以的话，哪个会更好一点"></a>愚蠢的问题：一门语言没有runtime和gc，它的优势除了快还有啥，编译语言实现gc和runtime的话，是在编译器实现上还是语言上？如果两个都可以的话，哪个会更好一点</h4><p>看起来你没有区分到 “编译器” 和 “语言”？可能你说的语言是指 runtime，编译器是指 compile-time，没有 gc 代表可以节省掉一堆的开销，因为 gc 一般需要单独的线程来进行处理，并且还需要跟主线程进行同步，而如果没有 gc，通常需要你手动的来释放内存 类似c与c++<br>你需要 free 掉你 molloc（之类）在 heap 上开辟的内存，要不然就会导致内存泄漏，这是很高效同时也很危险的事情<br>而 Rust 通过 ownership 可以既保持高效的同时也不会导致内存泄漏，甚至在编译期就能检查出 ownership 的情况 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-如何实现-externals&quot;&gt;&lt;a href=&quot;#1-如何实现-externals&quot; class=&quot;headerlink&quot; title=&quot;1.如何实现 externals&quot;&gt;&lt;/a&gt;1.如何实现 externals&lt;/h3&gt;&lt;p&gt;本来作用是：防止将某些 im</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-8-2 算法</title>
    <link href="http://example.com/2021/08/02/daycode/8.2/"/>
    <id>http://example.com/2021/08/02/daycode/8.2/</id>
    <published>2021-08-02T14:19:54.000Z</published>
    <updated>2021-08-02T14:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// var searchRange = function(nums, target) &#123;</span></span><br><span class="line"><span class="comment">//   return nums.reduce((h, v, i) =&gt; (h[v] ? h[v][1] = i : h[v] = [i, i], h), Object.create(null))[target] || [-1, -1]</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// let n = nums.length ,map = new Map()</span></span><br><span class="line"><span class="comment">// if(!n) return [-1,-1]</span></span><br><span class="line"><span class="comment">// for(let i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">//     if(target===nums[i])&#123;</span></span><br><span class="line"><span class="comment">//         map.set(nums[i],i)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if(map.has(target))&#123;</span></span><br><span class="line"><span class="comment">//     return [map.get(target)-1,map.get(target)]</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">//     return [-1,-1]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//力扣 1337 api解法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kWeakRows</span>(<span class="params">mat, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  mat.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> map.set(item, index));</span><br><span class="line">  mat.sort()</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: k &#125;, <span class="function">(<span class="params">_, index</span>) =&gt;</span> map.get(mat[index]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mat =</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">  k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(kWeakRows(mat, k))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-13 算法主题</title>
    <link href="http://example.com/2021/08/02/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://example.com/2021/08/02/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2021-08-02T00:14:56.000Z</published>
    <updated>2021-08-02T00:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>力扣34. 在排序数组中查找元素的第一个和最后一个位置</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;力扣34. 在排序数组中查找元素的第一个和最后一个位置&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="算法主题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%BB%E9%A2%98/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 第一章总结</title>
    <link href="http://example.com/2021/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://example.com/2021/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2021-07-31T17:40:06.000Z</published>
    <updated>2021-07-31T17:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/01/Bp1Gl57PJDrjnQ8.png" alt="2021.8.1CSAPP.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/01/Bp1Gl57PJDrjnQ8.png&quot; alt=&quot;2021.8.1CSAPP.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="http://example.com/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-23学习</title>
    <link href="http://example.com/2021/07/31/daylearn/2021.7.23/"/>
    <id>http://example.com/2021/07/31/daylearn/2021.7.23/</id>
    <published>2021-07-31T08:40:16.000Z</published>
    <updated>2021-07-31T08:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-异或思想"><a href="#1-异或思想" class="headerlink" title="1.异或思想"></a>1.异或思想</h3><p>计算机语言中，C，C++，Java语言中，使用按位异或的思想执行的操作。异或操作满足结合律和交换律，则由其性质可知，在计算机语言中，实现一些功能，例如参数的交换，奇偶性的判断等</p><h3 id="2-MutationObserver"><a href="#2-MutationObserver" class="headerlink" title="2. MutationObserver"></a>2. MutationObserver</h3><p>创建并返回一个新的观察器，触发指定dom事件，并调用指定的回调函数<br>页面白屏，检查是否插入广告，数据埋点，元素展示/消失</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-异或思想&quot;&gt;&lt;a href=&quot;#1-异或思想&quot; class=&quot;headerlink&quot; title=&quot;1.异或思想&quot;&gt;&lt;/a&gt;1.异或思想&lt;/h3&gt;&lt;p&gt;计算机语言中，C，C++，Java语言中，使用按位异或的思想执行的操作。异或操作满足结合律和交换律，则由其性</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-14学习</title>
    <link href="http://example.com/2021/07/31/daylearn/2021.7.14/"/>
    <id>http://example.com/2021/07/31/daylearn/2021.7.14/</id>
    <published>2021-07-31T08:10:36.000Z</published>
    <updated>2021-07-31T08:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-JavaScript中对象序列化？为什么需要序列化？"><a href="#1-JavaScript中对象序列化？为什么需要序列化？" class="headerlink" title="1.JavaScript中对象序列化？为什么需要序列化？"></a>1.JavaScript中对象序列化？为什么需要序列化？</h3><p>序列化的好处:对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。</p><p>对象序列化: 把对象的状态转换为字符串的过程，之后可以恢复对象的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript提供了JSON.stringfy()和JSON.parse() 用于序列化和恢复JavaScript对象状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Web-Component是啥？有啥作用？"><a href="#2-Web-Component是啥？有啥作用？" class="headerlink" title="2.Web Component是啥？有啥作用？"></a>2.Web Component是啥？有啥作用？</h3><p>允许在Web文档和Web应用程序中创建可重用的小部件或组件。这样做的目的是将基于组件的软件工程引入万维网。组件模型将允许单个HTML元素的封装和互操作性。<br>Custom elements（自定义元素）<br>Shadow DOM（影子DOM） 在微前端上可以用作隔离css样子起到沙箱作用<br>HTML templates（HTML模板）</p><h3 id="3-Reflect是啥？有啥作用？"><a href="#3-Reflect是啥？有啥作用？" class="headerlink" title="3.Reflect是啥？有啥作用？"></a>3.Reflect是啥？有啥作用？</h3><p>1.Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers的方法相同。Reflect不是一个函数对象，因此它是不可构造的。<br>2.作用看api</p><h3 id="4-现代计算机结构"><a href="#4-现代计算机结构" class="headerlink" title="4.现代计算机结构"></a>4.现代计算机结构</h3><p>背景:冯曼诺伊结构是以运算器为核心，<br>现代计算机以存储器为核心 有输入输出设备，运算器，控制器<br>区别是 现代计算机在性能上更好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-JavaScript中对象序列化？为什么需要序列化？&quot;&gt;&lt;a href=&quot;#1-JavaScript中对象序列化？为什么需要序列化？&quot; class=&quot;headerlink&quot; title=&quot;1.JavaScript中对象序列化？为什么需要序列化？&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/07/28/daylearn/2021.7.28/"/>
    <id>http://example.com/2021/07/28/daylearn/2021.7.28/</id>
    <published>2021-07-27T23:55:36.000Z</published>
    <updated>2021-07-27T23:55:36.000Z</updated>
    
    
    
    
    <category term="daylearn" scheme="http://example.com/categories/daylearn/"/>
    
    
  </entry>
  
  <entry>
    <title>2021-7-27学习</title>
    <link href="http://example.com/2021/07/27/daylearn/2021.7.27/"/>
    <id>http://example.com/2021/07/27/daylearn/2021.7.27/</id>
    <published>2021-07-27T02:49:00.000Z</published>
    <updated>2021-07-27T02:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-虚拟内存和物理内存"><a href="#1-虚拟内存和物理内存" class="headerlink" title="1.虚拟内存和物理内存"></a>1.虚拟内存和物理内存</h3><p>物理内存 真实的内存<br>虚拟内存，虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。<br>直接使用物理内存造成的不好影响</p><ul><li>内存空间利用率的问题<br>各个进程对内存的使用会导致内存碎片化，当要用malloc分配一块很大的内存空间时，可能会出现虽然有足够多的空闲物理内存，却没有足够大的连续空闲内存这种情况，东一块西一块的内存碎片就被浪费掉了</li><li>读写内存的安全性问题<br>物理内存本身是不限制访问的，任何地址都可以读写，而现代操作系统需要实现不同的页面具有不同的访问权限，例如只读的数据等等</li><li>进程间的安全问题<br> 各个进程之间没有独立的地址空间，一个进程由于执行错误指令或是恶意代码都可以直接修改其它进程的数据，甚至修改内核地址空间的数据，这是操作系统所不愿看到的</li><li>内存读写的效率问题<br>当多个进程同时运行，需要分配给进程的内存总和大于实际可用的物理内存时，需要将其他程序暂时拷贝到硬盘当中，然后将新的程序装入内存运行。由于大量的数据频繁装入装出，内存的使用效率会非常低</li></ul><h3 id="2-compose函数"><a href="#2-compose函数" class="headerlink" title="2. compose函数"></a>2. compose函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">...fns</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">composed</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = fns.slice()</span><br><span class="line">    <span class="keyword">while</span> (list.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      result =list.pop()(result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-虚拟内存和物理内存&quot;&gt;&lt;a href=&quot;#1-虚拟内存和物理内存&quot; class=&quot;headerlink&quot; title=&quot;1.虚拟内存和物理内存&quot;&gt;&lt;/a&gt;1.虚拟内存和物理内存&lt;/h3&gt;&lt;p&gt;物理内存 真实的内存&lt;br&gt;虚拟内存，虚拟内存是计算机系统内存管理的</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-26 算法</title>
    <link href="http://example.com/2021/07/26/daycode/7.26/"/>
    <id>http://example.com/2021/07/26/daycode/7.26/</id>
    <published>2021-07-26T14:26:16.000Z</published>
    <updated>2021-07-26T14:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//红绿灯控制</span></span><br><span class="line"><span class="comment">// 红灯3秒亮一次，黄灯2秒亮一次，绿灯1秒亮一次；如何让三个灯不断交替重复亮灯？（用Promise实现）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> light = <span class="function"><span class="keyword">function</span> (<span class="params">timer, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cb()</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, timer)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> step = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> light(<span class="number">3000</span>, red)</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> light(<span class="number">2000</span>, yellow)</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> light(<span class="number">1000</span>, green)</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> step()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step();</span><br><span class="line"><span class="comment">//力扣 31下一个排列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextMax</span>(<span class="params">nums</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = nums.length -<span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> j = nums.length -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;nums[j]&lt;=nums[i])&#123;</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    [nums[i],nums[j]]=[nums[j],nums[i]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> l = i+<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> r  = nums.length -<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    [nums[l],nums[r]] =[nums[r],nums[l]]</span><br><span class="line">    l++;</span><br><span class="line">    r--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-20学习</title>
    <link href="http://example.com/2021/07/22/daylearn/2021.7.22/"/>
    <id>http://example.com/2021/07/22/daylearn/2021.7.22/</id>
    <published>2021-07-22T14:08:46.000Z</published>
    <updated>2021-07-22T14:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node中-readFile-和readAsyncFile"><a href="#node中-readFile-和readAsyncFile" class="headerlink" title="node中 readFile 和readAsyncFile"></a>node中 readFile 和readAsyncFile</h3><p>第一个是异步读取，第二个是异步读取（注重看api的名字）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;node中-readFile-和readAsyncFile&quot;&gt;&lt;a href=&quot;#node中-readFile-和readAsyncFile&quot; class=&quot;headerlink&quot; title=&quot;node中 readFile 和readAsyncFile&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-20学习</title>
    <link href="http://example.com/2021/07/21/daylearn/2021.7.20/"/>
    <id>http://example.com/2021/07/21/daylearn/2021.7.20/</id>
    <published>2021-07-21T02:33:28.000Z</published>
    <updated>2021-07-21T02:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-树的先中后序遍历"><a href="#1-树的先中后序遍历" class="headerlink" title="1. 树的先中后序遍历"></a>1. 树的先中后序遍历</h3><p>   先中后遍历区别在遍历根节点的时机<br>   <img src="https://i.loli.net/2021/07/20/z7no9QZeKHhTMCL.png" alt="树的遍历.jpg"><br>   先序：ABDECF<br>   中序：BDEACF<br>   后序：BDECFA</p><h3 id="2-计算机主存储器-及bit-字，字节区分"><a href="#2-计算机主存储器-及bit-字，字节区分" class="headerlink" title="2. 计算机主存储器  及bit 字，字节区分"></a>2. 计算机主存储器  及bit 字，字节区分</h3><p><img src="https://i.loli.net/2021/07/20/9wyD3htIPdW8sna.png" alt="存储.jpg"></p><h3 id="3-URL-searchParams-使用"><a href="#3-URL-searchParams-使用" class="headerlink" title="3.URL.searchParams 使用"></a>3.URL.searchParams 使用</h3><p>处理url 参数<br>var URLSearchParams = new URLSearchParams(init);</p><h3 id="4-ts中非空断言"><a href="#4-ts中非空断言" class="headerlink" title="4.ts中非空断言!."></a>4.ts中非空断言!.</h3><p>在变量后面添加一个 ! 就会忽略 undefined 和 null。<br>在react中获取dom节点，React refs 可以用来访问 HTML 节点 DOM。ref.current 的值有时可能是 null（这是因为引用的元素还没有 mounted）<br>在很多情况下，我们能确定 current 元素已经 mounted，因此，null 是不需要的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> ScrolledInput = <span class="function">() =&gt;</span> &#123; </span><br><span class="line">   <span class="keyword">const</span> ref = React.createRef&lt;HTMLInputElement&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> goToInput = <span class="function">() =&gt;</span> ref.current.scrollIntoView(); <span class="comment">//compilation error: ref.current is possibly null</span></span><br><span class="line">   <span class="comment">// const goToInput = () =&gt; ref.current!.scrollIntoView(); 优化做法</span></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;goToInput&#125;</span>&gt;</span>Go to Input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-树的先中后序遍历&quot;&gt;&lt;a href=&quot;#1-树的先中后序遍历&quot; class=&quot;headerlink&quot; title=&quot;1. 树的先中后序遍历&quot;&gt;&lt;/a&gt;1. 树的先中后序遍历&lt;/h3&gt;&lt;p&gt;   先中后遍历区别在遍历根节点的时机&lt;br&gt;   &lt;img src=&quot;</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-20 算法</title>
    <link href="http://example.com/2021/07/21/daycode/7.20/"/>
    <id>http://example.com/2021/07/21/daycode/7.20/</id>
    <published>2021-07-20T23:12:20.000Z</published>
    <updated>2021-07-20T23:12:20.000Z</updated>
    
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-21 算法</title>
    <link href="http://example.com/2021/07/21/daycode/7.21/"/>
    <id>http://example.com/2021/07/21/daycode/7.21/</id>
    <published>2021-07-20T23:12:12.000Z</published>
    <updated>2021-07-20T23:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>力扣 11. 盛最多水的容器<br>[网址]<a href="https://leetcode-cn.com/problems/container-with-most-water/">https://leetcode-cn.com/problems/container-with-most-water/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是双指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxArea</span>(<span class="params">height</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l =<span class="number">0</span>,r = height.length-<span class="number">1</span>,res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">let</span> area=<span class="built_in">Math</span>.min(height[l],height[r])*(r-l)</span><br><span class="line">    res =<span class="built_in">Math</span>.max(res,area)</span><br><span class="line">    <span class="keyword">if</span>(height[l]&lt;height[r])&#123;</span><br><span class="line">      l++</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      r--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;力扣 11. 盛最多水的容器&lt;br&gt;[网址]&lt;a href=&quot;https://leetcode-cn.com/problems/container-with-most-water/&quot;&gt;https://leetcode-cn.com/problems/container-wi</summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-19学习</title>
    <link href="http://example.com/2021/07/20/daylearn/2021.7.19/"/>
    <id>http://example.com/2021/07/20/daylearn/2021.7.19/</id>
    <published>2021-07-19T23:38:50.000Z</published>
    <updated>2021-07-19T23:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Babel-的微内核架构"><a href="#1-Babel-的微内核架构" class="headerlink" title="1. Babel  的微内核架构"></a>1. Babel  的微内核架构</h3><p>webpack和babel都采用了微内核架构,通过plugin来丰富自己的功能<br><img src="https://i.loli.net/2021/07/19/SFuQHNtGvhjkc3Z.png" alt="babel.jpg"></p><h3 id="2-Array-at-method-方法应用"><a href="#2-Array-at-method-方法应用" class="headerlink" title="2.  Array.at  method 方法应用"></a>2.  Array.at  method 方法应用</h3><p>支持负索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[a,b,c,d]</span><br><span class="line">arr[-<span class="number">1</span>]<span class="comment">//d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果下标为负  计算方式为array.length+负index</span></span><br></pre></td></tr></table></figure><h3 id="3-不用proxy-如何阻止一个对象的key-value被修改"><a href="#3-不用proxy-如何阻止一个对象的key-value被修改" class="headerlink" title="3.不用proxy 如何阻止一个对象的key value被修改"></a>3.不用proxy 如何阻止一个对象的key value被修改</h3><p>Object.freeze/seal</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xw =&#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.freeze(xw)</span><br></pre></td></tr></table></figure><h3 id="4-ajax和-axios的区别"><a href="#4-ajax和-axios的区别" class="headerlink" title="4.ajax和 axios的区别"></a>4.ajax和 axios的区别</h3><p>axios 特性有                         </p><ul><li>从node.js创建http请求</li><li>支持Promise API</li><li>客户端支持防止CSRF</li><li>提供了一些并发请求的接口</li></ul><p>ajax特性有</p><p>本身是针对MVC的编程，不符合现在前端的MVVM的浪潮<br>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案<br>Jquery整个项目太大， 单纯使用ajax却要引入整个Jquery非常的不合理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Babel-的微内核架构&quot;&gt;&lt;a href=&quot;#1-Babel-的微内核架构&quot; class=&quot;headerlink&quot; title=&quot;1. Babel  的微内核架构&quot;&gt;&lt;/a&gt;1. Babel  的微内核架构&lt;/h3&gt;&lt;p&gt;webpack和babel都采用了微</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-19 算法</title>
    <link href="http://example.com/2021/07/19/daycode/7.19/"/>
    <id>http://example.com/2021/07/19/daycode/7.19/</id>
    <published>2021-07-18T17:09:22.000Z</published>
    <updated>2021-07-18T17:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Promise.race</span></span><br><span class="line"><span class="comment">//比较简单无聊</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromiserace</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(item).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        reject(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-15学习</title>
    <link href="http://example.com/2021/07/17/daylearn/2021.7.15/"/>
    <id>http://example.com/2021/07/17/daylearn/2021.7.15/</id>
    <published>2021-07-17T10:18:08.000Z</published>
    <updated>2021-07-17T10:18:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-ArrayBuffer和Blob的区别？"><a href="#1-ArrayBuffer和Blob的区别？" class="headerlink" title="1.ArrayBuffer和Blob的区别？"></a>1.ArrayBuffer和Blob的区别？</h3><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。它是一个字节数组，通常在其他语言中称为“byte array”。<br>不能直接操纵一个ArrayBuffer中的内容；需要创建一个类型化数组的视图或一个描述缓冲数据格式的DataView，使用这些api来读写缓冲区中的内容.</p><p>Blob操作二进制文件<br>ArrayBuffer 用于操作内存</p><h3 id="2-定型数组"><a href="#2-定型数组" class="headerlink" title="2.定型数组"></a>2.定型数组</h3><p>定型数组具有固定的长度和固定的数值元素类型，支持对二进制数据的字节级访问</p><h3 id="3-迭代器原理"><a href="#3-迭代器原理" class="headerlink" title="3.迭代器原理"></a>3.迭代器原理</h3><p>*[symbol iterator]</p><h3 id="4-single-spa文档"><a href="#4-single-spa文档" class="headerlink" title="4.single-spa文档"></a>4.single-spa文档</h3><p>后面形成xmind</p><h3 id="5-js语言的优缺点"><a href="#5-js语言的优缺点" class="headerlink" title="5.js语言的优缺点"></a>5.js语言的优缺点</h3><p>Advantages of JavaScript<br>Speed. Client-side JavaScript is very fast because it can be run immediately within the client-side browser. Unless outside resources are required, JavaScript is unhindered by network calls to a backend server.</p><p>Simplicity. JavaScript is relatively simple to learn and implement.</p><p>Popularity. JavaScript is used everywhere on the web.</p><p>Interoperability. JavaScript plays nicely with other languages and can be used in a huge variety of applications.</p><p>Server Load. Being client-side reduces the demand on the website server.</p><p>Gives the ability to create rich interfaces.</p><p>Disadvantages of JavaScript<br>Client-Side Security. Because the code executes on the users’ computer, in some cases it can be exploited for malicious purposes. This is one reason some people choose to disable Javascript.</p><p>Browser Support. JavaScript is sometimes interpreted differently by different browsers. This makes it somewhat difficult to write cross-browser code.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-ArrayBuffer和Blob的区别？&quot;&gt;&lt;a href=&quot;#1-ArrayBuffer和Blob的区别？&quot; class=&quot;headerlink&quot; title=&quot;1.ArrayBuffer和Blob的区别？&quot;&gt;&lt;/a&gt;1.ArrayBuffer和Blob的区</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
</feed>
