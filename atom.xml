<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独快乐的时光</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-20T00:19:38.753Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021-7-20学习</title>
    <link href="http://example.com/2021/07/20/daylearn/2021.7.20/"/>
    <id>http://example.com/2021/07/20/daylearn/2021.7.20/</id>
    <published>2021-07-19T23:39:48.052Z</published>
    <updated>2021-07-20T00:19:38.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-树的先中后序遍历"><a href="#1-树的先中后序遍历" class="headerlink" title="1. 树的先中后序遍历"></a>1. 树的先中后序遍历</h3><p>   先中后遍历区别在遍历根节点的时机<br>   <img src="https://i.loli.net/2021/07/20/z7no9QZeKHhTMCL.png" alt="树的遍历.jpg"><br>   先序：ABDECF<br>   中序：BDEACF<br>   后序：BDECFA</p><h3 id="2-计算机主存储器-及bit-字，字节区分"><a href="#2-计算机主存储器-及bit-字，字节区分" class="headerlink" title="2. 计算机主存储器  及bit 字，字节区分"></a>2. 计算机主存储器  及bit 字，字节区分</h3><p><img src="https://i.loli.net/2021/07/20/9wyD3htIPdW8sna.png" alt="存储.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-树的先中后序遍历&quot;&gt;&lt;a href=&quot;#1-树的先中后序遍历&quot; class=&quot;headerlink&quot; title=&quot;1. 树的先中后序遍历&quot;&gt;&lt;/a&gt;1. 树的先中后序遍历&lt;/h3&gt;&lt;p&gt;   先中后遍历区别在遍历根节点的时机&lt;br&gt;   &lt;img src=&quot;</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-19学习</title>
    <link href="http://example.com/2021/07/19/daylearn/2021.7.19/"/>
    <id>http://example.com/2021/07/19/daylearn/2021.7.19/</id>
    <published>2021-07-19T05:11:43.750Z</published>
    <updated>2021-07-19T23:38:48.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Babel-的微内核架构"><a href="#1-Babel-的微内核架构" class="headerlink" title="1. Babel  的微内核架构"></a>1. Babel  的微内核架构</h3><p>webpack和babel都采用了微内核架构,通过plugin来丰富自己的功能<br><img src="https://i.loli.net/2021/07/19/SFuQHNtGvhjkc3Z.png" alt="babel.jpg"></p><h3 id="2-Array-at-method-方法应用"><a href="#2-Array-at-method-方法应用" class="headerlink" title="2.  Array.at  method 方法应用"></a>2.  Array.at  method 方法应用</h3><p>支持负索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[a,b,c,d]</span><br><span class="line">arr[-<span class="number">1</span>]<span class="comment">//d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果下标为负  计算方式为array.length+负index</span></span><br></pre></td></tr></table></figure><h3 id="3-不用proxy-如何阻止一个对象的key-value被修改"><a href="#3-不用proxy-如何阻止一个对象的key-value被修改" class="headerlink" title="3.不用proxy 如何阻止一个对象的key value被修改"></a>3.不用proxy 如何阻止一个对象的key value被修改</h3><p>Object.freeze/seal</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xw =&#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.freeze(xw)</span><br></pre></td></tr></table></figure><h3 id="4-ajax和-axios的区别"><a href="#4-ajax和-axios的区别" class="headerlink" title="4.ajax和 axios的区别"></a>4.ajax和 axios的区别</h3><p>axios 特性有                         </p><ul><li>从node.js创建http请求</li><li>支持Promise API</li><li>客户端支持防止CSRF</li><li>提供了一些并发请求的接口</li></ul><p>ajax特性有</p><p>本身是针对MVC的编程，不符合现在前端的MVVM的浪潮<br>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案<br>Jquery整个项目太大， 单纯使用ajax却要引入整个Jquery非常的不合理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Babel-的微内核架构&quot;&gt;&lt;a href=&quot;#1-Babel-的微内核架构&quot; class=&quot;headerlink&quot; title=&quot;1. Babel  的微内核架构&quot;&gt;&lt;/a&gt;1. Babel  的微内核架构&lt;/h3&gt;&lt;p&gt;webpack和babel都采用了微</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-19 算法</title>
    <link href="http://example.com/2021/07/19/daycode/7.19/"/>
    <id>http://example.com/2021/07/19/daycode/7.19/</id>
    <published>2021-07-18T17:03:28.931Z</published>
    <updated>2021-07-18T17:09:21.309Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Promise.race</span></span><br><span class="line"><span class="comment">//比较简单无聊</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromiserace</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(item).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        reject(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-16学习</title>
    <link href="http://example.com/2021/07/16/daylearn/2021.7.16/"/>
    <id>http://example.com/2021/07/16/daylearn/2021.7.16/</id>
    <published>2021-07-16T06:06:24.788Z</published>
    <updated>2021-07-17T10:08:48.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-nrm-换源"><a href="#1-nrm-换源" class="headerlink" title="1.nrm 换源"></a>1.nrm 换源</h3><p>较为方便切换npm 源</p><h3 id="2-node多进程的实现"><a href="#2-node多进程的实现" class="headerlink" title="2.node多进程的实现"></a>2.node多进程的实现</h3><p>Node.js 提供了 child_process 模块支持多进程，通过 child_process.fork(modulePath) 方法可以调用指定模块，衍生新的 Node.js 进程 worker.js  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-nrm-换源&quot;&gt;&lt;a href=&quot;#1-nrm-换源&quot; class=&quot;headerlink&quot; title=&quot;1.nrm 换源&quot;&gt;&lt;/a&gt;1.nrm 换源&lt;/h3&gt;&lt;p&gt;较为方便切换npm 源&lt;/p&gt;
&lt;h3 id=&quot;2-node多进程的实现&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-15 算法</title>
    <link href="http://example.com/2021/07/15/daycode/7.15/"/>
    <id>http://example.com/2021/07/15/daycode/7.15/</id>
    <published>2021-07-15T14:07:44.713Z</published>
    <updated>2021-07-15T16:05:04.891Z</updated>
    
    <content type="html"><![CDATA[<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><p>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><p>string convert(string s, int numRows);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">covert</span>(<span class="params">str,numrows</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(numrows===<span class="number">1</span>)<span class="keyword">return</span> str</span><br><span class="line">  <span class="keyword">const</span> rows = [];</span><br><span class="line">  <span class="keyword">const</span> len = <span class="built_in">Math</span>.min(str.length,numrows)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="keyword">return</span> rows[i] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> down  =<span class="literal">false</span> ,loc=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">of</span> s)&#123;</span><br><span class="line">    rows[loc]+=a</span><br><span class="line">    <span class="keyword">if</span>(loc===<span class="number">0</span>||loc===numrows-<span class="number">1</span>)&#123;</span><br><span class="line">      down=!down</span><br><span class="line">      loc +=down?<span class="number">1</span>:-<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> b <span class="keyword">of</span> rows)&#123;</span><br><span class="line">    ans +=b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。&lt;/p&gt;
&lt;p&gt;比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：&lt;/p&gt;
&lt;p&gt;P   A   H   N&lt;br&gt;A P L S I I G&lt;br&gt;</summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-15学习</title>
    <link href="http://example.com/2021/07/15/daylearn/2021.7.15/"/>
    <id>http://example.com/2021/07/15/daylearn/2021.7.15/</id>
    <published>2021-07-14T16:58:01.413Z</published>
    <updated>2021-07-17T10:18:07.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-ArrayBuffer和Blob的区别？"><a href="#1-ArrayBuffer和Blob的区别？" class="headerlink" title="1.ArrayBuffer和Blob的区别？"></a>1.ArrayBuffer和Blob的区别？</h3><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。它是一个字节数组，通常在其他语言中称为“byte array”。<br>不能直接操纵一个ArrayBuffer中的内容；需要创建一个类型化数组的视图或一个描述缓冲数据格式的DataView，使用这些api来读写缓冲区中的内容.</p><p>Blob操作二进制文件<br>ArrayBuffer 用于操作内存</p><h3 id="2-定型数组"><a href="#2-定型数组" class="headerlink" title="2.定型数组"></a>2.定型数组</h3><p>定型数组具有固定的长度和固定的数值元素类型，支持对二进制数据的字节级访问</p><h3 id="3-迭代器原理"><a href="#3-迭代器原理" class="headerlink" title="3.迭代器原理"></a>3.迭代器原理</h3><p>*[symbol iterator]</p><h3 id="4-single-spa文档"><a href="#4-single-spa文档" class="headerlink" title="4.single-spa文档"></a>4.single-spa文档</h3><p>后面形成xmind</p><h3 id="5-js语言的优缺点"><a href="#5-js语言的优缺点" class="headerlink" title="5.js语言的优缺点"></a>5.js语言的优缺点</h3><p>Advantages of JavaScript<br>Speed. Client-side JavaScript is very fast because it can be run immediately within the client-side browser. Unless outside resources are required, JavaScript is unhindered by network calls to a backend server.</p><p>Simplicity. JavaScript is relatively simple to learn and implement.</p><p>Popularity. JavaScript is used everywhere on the web.</p><p>Interoperability. JavaScript plays nicely with other languages and can be used in a huge variety of applications.</p><p>Server Load. Being client-side reduces the demand on the website server.</p><p>Gives the ability to create rich interfaces.</p><p>Disadvantages of JavaScript<br>Client-Side Security. Because the code executes on the users’ computer, in some cases it can be exploited for malicious purposes. This is one reason some people choose to disable Javascript.</p><p>Browser Support. JavaScript is sometimes interpreted differently by different browsers. This makes it somewhat difficult to write cross-browser code.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-ArrayBuffer和Blob的区别？&quot;&gt;&lt;a href=&quot;#1-ArrayBuffer和Blob的区别？&quot; class=&quot;headerlink&quot; title=&quot;1.ArrayBuffer和Blob的区别？&quot;&gt;&lt;/a&gt;1.ArrayBuffer和Blob的区</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-14 算法</title>
    <link href="http://example.com/2021/07/14/daycode/7.14/"/>
    <id>http://example.com/2021/07/14/daycode/7.14/</id>
    <published>2021-07-14T10:49:12.186Z</published>
    <updated>2021-07-14T12:10:32.531Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>示例 1：</p><p>输入：nums1 = [1,3], nums2 = [2]<br>输出：2.00000<br>解释：合并数组 = [1,2,3] ，中位数 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 归并排序</span></span><br><span class="line">  <span class="keyword">const</span> merged = []</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">      merged.push(nums1[i++])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      merged.push(nums2[j++])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; nums1.length) &#123;</span><br><span class="line">    merged.push(nums1[i++])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(j &lt; nums2.length) &#123;</span><br><span class="line">    merged.push(nums2[j++])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = merged</span><br><span class="line">  <span class="keyword">return</span> length % <span class="number">2</span> === <span class="number">1</span></span><br><span class="line">    ? merged[<span class="built_in">Math</span>.floor(length / <span class="number">2</span>)]</span><br><span class="line">    : (merged[length / <span class="number">2</span>] + merged[length / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：nums1 = [1,3], nums2 = [2]&lt;br&gt;输出：2.00000&lt;br&gt;解释：合并数</summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-14学习</title>
    <link href="http://example.com/2021/07/14/daylearn/2021.7.14/"/>
    <id>http://example.com/2021/07/14/daylearn/2021.7.14/</id>
    <published>2021-07-13T17:26:00.691Z</published>
    <updated>2021-07-18T17:12:07.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-JavaScript中对象序列化？为什么需要序列化？"><a href="#1-JavaScript中对象序列化？为什么需要序列化？" class="headerlink" title="1.JavaScript中对象序列化？为什么需要序列化？"></a>1.JavaScript中对象序列化？为什么需要序列化？</h3><p>序列化的好处:对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。</p><p>对象序列化: 把对象的状态转换为字符串的过程，之后可以恢复对象的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript提供了JSON.stringfy()和JSON.parse() 用于序列化和恢复JavaScript对象状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Web-Component是啥？有啥作用？"><a href="#2-Web-Component是啥？有啥作用？" class="headerlink" title="2.Web Component是啥？有啥作用？"></a>2.Web Component是啥？有啥作用？</h3><p>允许在Web文档和Web应用程序中创建可重用的小部件或组件。这样做的目的是将基于组件的软件工程引入万维网。组件模型将允许单个HTML元素的封装和互操作性。<br>Custom elements（自定义元素）<br>Shadow DOM（影子DOM）<br>HTML templates（HTML模板）</p><h3 id="3-Reflect是啥？有啥作用？"><a href="#3-Reflect是啥？有啥作用？" class="headerlink" title="3.Reflect是啥？有啥作用？"></a>3.Reflect是啥？有啥作用？</h3><p>1.Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers的方法相同。Reflect不是一个函数对象，因此它是不可构造的。<br>2.作用看api</p><h3 id="4-现代计算机结构"><a href="#4-现代计算机结构" class="headerlink" title="4.现代计算机结构"></a>4.现代计算机结构</h3><p>背景:冯曼诺伊结构是以运算器为核心，<br>现代计算机以存储器为核心 有输入输出设备，运算器，控制器<br>区别是 现代计算机在性能上更好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-JavaScript中对象序列化？为什么需要序列化？&quot;&gt;&lt;a href=&quot;#1-JavaScript中对象序列化？为什么需要序列化？&quot; class=&quot;headerlink&quot; title=&quot;1.JavaScript中对象序列化？为什么需要序列化？&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-13 算法</title>
    <link href="http://example.com/2021/07/14/daycode/7.13/"/>
    <id>http://example.com/2021/07/14/daycode/7.13/</id>
    <published>2021-07-13T16:30:21.844Z</published>
    <updated>2021-07-13T16:33:12.874Z</updated>
    
    <content type="html"><![CDATA[<p>最长回文字符串</p><p>回文就是正着读反着读都可以的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中心扩散法</span></span><br><span class="line"><span class="keyword">let</span> s= <span class="string">&#x27;babad&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longStr</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">    helper(i,i)</span><br><span class="line">    helper(i,i+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">m,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;=<span class="number">0</span>&amp;&amp;n&lt;s.length&amp;&amp;s[m]===s[n])&#123;</span><br><span class="line">      m--;</span><br><span class="line">      n++</span><br><span class="line">      <span class="keyword">if</span>(n-m-<span class="number">1</span>&gt;res.length)&#123;</span><br><span class="line">        res = s.slice(m-<span class="number">1</span>,n)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longStr(s))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最长回文字符串&lt;/p&gt;
&lt;p&gt;回文就是正着读反着读都可以的&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="day[code]" scheme="http://example.com/categories/day-code/"/>
    
    
    <category term="day[code]" scheme="http://example.com/tags/day-code/"/>
    
  </entry>
  
  <entry>
    <title>2021-7-13学习</title>
    <link href="http://example.com/2021/07/13/daylearn/2021.7.13/"/>
    <id>http://example.com/2021/07/13/daylearn/2021.7.13/</id>
    <published>2021-07-13T10:24:34.471Z</published>
    <updated>2021-07-17T10:14:17.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-ts中泛型是什么（回顾）"><a href="#1-ts中泛型是什么（回顾）" class="headerlink" title="1.ts中泛型是什么（回顾）"></a>1.ts中泛型是什么（回顾）</h4><p>复用定义的数据接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不用泛型写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//采用泛型，对返回值类型进行约束</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-控制反转"><a href="#2-控制反转" class="headerlink" title="2.控制反转"></a>2.控制反转</h4><p>缩写常见（IoC）</p><p>面向对象的设计原则，降低代码耦合度,常见实现方法是依赖注入和依赖查找</p><p>细节：Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。</p><h4 id="3-react-更新机制"><a href="#3-react-更新机制" class="headerlink" title="3.react 更新机制"></a>3.react 更新机制</h4><ul><li><p>1.render阶段:render阶段开始于performSyncWorkOnRoot或performConcurrentWorkOnRoot方法的调用。这取决于本次更新是同步更新还是异步更新。</p></li><li><p>2.commit阶段: commitRoot方法的调用。其中rootFiber会作为传参。</p></li><li><p>3.创建Update对象:ReactDOM.render this.setState  this.forceUpdate useState useReduce都可以触发状态更新</p></li><li><p>4.从fiber到root</p></li><li><p>5.调度更新</p><p><img src="C:\Users\大蟒刀\hexo-blog\source_posts\assents\react状态更新流程.jpg" alt="调度更新"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-ts中泛型是什么（回顾）&quot;&gt;&lt;a href=&quot;#1-ts中泛型是什么（回顾）&quot; class=&quot;headerlink&quot; title=&quot;1.ts中泛型是什么（回顾）&quot;&gt;&lt;/a&gt;1.ts中泛型是什么（回顾）&lt;/h4&gt;&lt;p&gt;复用定义的数据接口&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="day[learn]" scheme="http://example.com/categories/day-learn/"/>
    
    
    <category term="day[learn]" scheme="http://example.com/tags/day-learn/"/>
    
  </entry>
  
  <entry>
    <title>2021杭州前端市场面试技术考研调研</title>
    <link href="http://example.com/2021/07/13/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>http://example.com/2021/07/13/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F%E6%8A%80%E6%9C%AF%E6%A0%88/</id>
    <published>2021-07-13T09:27:10.761Z</published>
    <updated>2021-07-13T09:40:14.654Z</updated>
    
    
    
    
    <category term="Interviews" scheme="http://example.com/categories/Interviews/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>第一天的vue</title>
    <link href="http://example.com/2021/07/13/%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%9A%84vue/"/>
    <id>http://example.com/2021/07/13/%E7%AC%AC%E4%B8%80%E5%A4%A9%E7%9A%84vue/</id>
    <published>2021-07-12T16:55:36.818Z</published>
    <updated>2021-07-12T17:08:53.726Z</updated>
    
    <content type="html"><![CDATA[<p>123chonga1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;123chonga1&lt;/p&gt;
</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/07/13/hello-world/"/>
    <id>http://example.com/2021/07/13/hello-world/</id>
    <published>2021-07-12T16:30:15.067Z</published>
    <updated>2021-07-12T17:02:56.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
